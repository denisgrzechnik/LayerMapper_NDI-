name: Build & Upload to App Store

on:
  push:
    branches: [ main ]
    tags:     [ 'v*.*.*' ]

jobs:
  build_and_submit:
    runs-on: macos-latest
    name: Build i wyślij do App Store Connect

    env:
      APP_SCHEME:  LayerMapper
      APP_PROJECT: LayerMapper.xcodeproj
      ARCHIVE:     $HOME/LayerMapper.xcarchive
      IPA_PATH:    $HOME/LayerMapper.ipa
      EXPORT_METHOD: app-store

    steps:
    # 1 ► Checkout (z plikami LFS)
    - uses: actions/checkout@v4
      with:
        lfs: true

    # 2 ► Ruby / altool (dla xcrun altool)
    - run: sudo gem install cocoapods --no-document

    # 3 ► Keychain + import certyfikatu .p12
    - name: Create temporary keychain
      run: |
        set -x
        security create-keychain -p "" build.keychain
        security set-keychain-settings -lut 21600 build.keychain
        security unlock-keychain -p "" build.keychain
        security list-keychains -d user | tr -d '"' | \
          xargs security list-keychains -s build.keychain
    - name: Import distribution certificate
      env:
        P12_BASE64:  ${{ secrets.P12_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      run: |
        set -x
        echo "$P12_BASE64" | base64 -d > dist.p12
        security import dist.p12 \
          -k ~/Library/Keychains/build.keychain \
          -P "$P12_PASSWORD" \
          -T /usr/bin/codesign

    # 4 ► Instalacja provisioning-profiles
    - name: Install provisioning profiles
      env:
        MP_APP:   ${{ secrets.MOBILEPROVISION_BASE64 }}
        MP_BC:    ${{ secrets.MOBILEPROVISION_BROADCAST_BASE64 }}
        MP_SU:    ${{ secrets.MOBILEPROVISION_SETUP_BASE64 }}
      run: |
        set -x
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$MP_APP" | base64 -d > LM.mobileprovision
        echo "$MP_BC"  | base64 -d > BC.mobileprovision
        echo "$MP_SU"  | base64 -d > SU.mobileprovision
        cp *.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

    # --- Debug: pokaż profile (Name | UUID | AppID)
    - name: Debug – list installed profiles
      run: |
        for p in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
          NAME=$(security cms -D -i "$p" | plutil -extract Name raw -)
          UUID=$(security cms -D -i "$p" | plutil -extract UUID raw -)
          APP=$(security cms -D -i "$p" | \
                plutil -extract Entitlements.application-identifier raw -)
          echo "$NAME | $UUID | $APP"
        done

    # 5 ► Rozpakowanie NDI (SDK + statyczna biblioteka)
    - name: Unzip NDI artefacts
      run: |
        set -x
        mkdir -p libs
        unzip -q libs/NDI_SDK.zip            -d libs/
        unzip -q libs/libndi_ios_arm64.a.zip -d libs/

    # 6 ► Build Xcode archive (Automatic Signing)
    - name: Build archive
      run: |
        set -x
        timeout 1800 \
        xcodebuild archive -verbose \
          -project  "$APP_PROJECT" \
          -scheme   "$APP_SCHEME" \
          -configuration Release \
          -archivePath "$ARCHIVE" \
          CODE_SIGN_STYLE=Automatic \
          OTHER_CODE_SIGN_FLAGS="--timestamp=none" \
          -allowProvisioningUpdates

    # 7 ► Export .ipa
    - name: Export IPA
      run: |
        set -x
        xcodebuild -exportArchive \
          -archivePath "$ARCHIVE" \
          -exportOptionsPlist <(cat <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <plist version="1.0">
            <dict>
              <key>method</key>            <string>${EXPORT_METHOD}</string>
              <key>teamID</key>            <string>${{ secrets.TEAM_ID }}</string>
              <key>uploadSymbols</key>     <true/>
              <key>compileBitcode</key>    <true/>
            </dict>
          </plist>
          EOF) \
          -exportPath $HOME

    # 8 ► Upload do App Store Connect
    - name: Upload to App Store Connect
      env:
        APPLE_ID:              ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_SPECIFIC_PASSWORD }}
      run: |
        set -x
        xcrun altool --upload-app \
          --file "$IPA_PATH" \
          --type ios \
          --username "$APPLE_ID" \
          --password "$APP_SPECIFIC_PASSWORD" \
          --output-format xml

    # 9 ► Cleanup keychain
    - if: always()
      name: Cleanup keychain
      run: security delete-keychain build.keychain || true
