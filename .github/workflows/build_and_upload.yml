name: Build & Upload to App Store
on:
  push:
    branches: [ main ]
    tags:     [ 'v*.*.*' ]

jobs:
  build:
    runs-on: macos-latest

    env:
      APP_SCHEME:  LayerMapper
      APP_PROJECT: LayerMapper.xcodeproj
      ARCHIVE:     $HOME/LayerMapper.xcarchive
      IPA_PATH:    $HOME/LayerMapper.ipa
      TEAM_ID:     ${{ secrets.TEAM_ID }}

    steps:
    # ---------- 1. Checkout ----------
    - uses: actions/checkout@v4
      with: { lfs: true }

    # ---------- 2. Narzędzia ----------
    - run: sudo gem install cocoapods --no-document

    # ---------- 3. Keychain + cert ----------
    - name: Keychain & cert
      run: |
        security create-keychain -p "" build.keychain
        security set-keychain-settings -lut 21600 build.keychain
        security unlock-keychain -p "" build.keychain
        security list-keychains -d user | tr -d '"' | xargs security list-keychains -s build.keychain
        echo "${{ secrets.P12_BASE64 }}" | base64 -d > dist.p12
        security import dist.p12 -k ~/Library/Keychains/build.keychain -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign

    # ---------- 4. Provisioning profiles ----------
    - name: Install provisioning profiles
      env:
        MP_APP:   ${{ secrets.MOBILEPROVISION_BASE64 }}
        MP_BC:    ${{ secrets.MOBILEPROVISION_BROADCAST_BASE64 }}
        MP_SU:    ${{ secrets.MOBILEPROVISION_SETUP_BASE64 }}
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$MP_APP" | base64 -d > LM.mobileprovision
        echo "$MP_BC"  | base64 -d > BC.mobileprovision
        echo "$MP_SU"  | base64 -d > SU.mobileprovision
        cp *.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

    # ---------- 5. Debug – lista profili ----------
    - run: |
        for p in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
          NAME=$(security cms -D -i "$p" | plutil -extract Name raw -)
          UUID=$(security cms -D -i "$p" | plutil -extract UUID raw -)
          APP=$(security cms -D -i "$p"  | plutil -extract Entitlements.application-identifier raw -)
          echo "$NAME | $UUID | $APP"
        done

    # ---------- 6. Rozpakuj NDI + slim ----------
    - name: Unzip NDI & slim library
      run: |
        set -x
        mkdir -p libs
        unzip -q libs/NDI_SDK.zip            -d libs/
        unzip -q libs/libndi_ios_arm64.a.zip -d libs/
        xcrun lipo libs/libndi_ios_arm64.a -thin arm64 -output libs/tmp.a
        xcrun strip -x -S libs/tmp.a
        mv libs/tmp.a libs/libndi_ios_arm64.a
        ls -lh libs/libndi_ios_arm64.a

    # ---------- 7. Build archive (Automatic signing) ----------
    - name: Xcode archive (automatic signing, 30-min timeout)
      run: |
        set -x
        timeout 1800 xcodebuild archive -verbose \
          -project "$APP_PROJECT" \
          -scheme  "$APP_SCHEME" \
          -configuration Release \
          -archivePath "$ARCHIVE" \
          CODE_SIGN_STYLE=Automatic \
          CODE_SIGN_IDENTITY="Apple Distribution" \
          OTHER_CODE_SIGN_FLAGS="--timestamp=none" \
          -allowProvisioningUpdates

    # ---------- 8. Export IPA ----------
    - name: Export .ipa
      run: |
        xcodebuild -exportArchive \
          -archivePath "$ARCHIVE" \
          -exportOptionsPlist <(cat <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <plist version="1.0">
            <dict>
              <key>method</key> <string>app-store</string>
              <key>teamID</key> <string>${TEAM_ID}</string>
              <key>uploadSymbols</key> <true/>
              <key>compileBitcode</key> <true/>
            </dict>
          </plist>
          EOF) \
          -exportPath $HOME

    # ---------- 9. Upload do ASC ----------
    - name: Upload IPA
      env:
        APPLE_ID:              ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_SPECIFIC_PASSWORD }}
      run: |
        xcrun altool --upload-app \
          --file "$IPA_PATH" \
          --type ios \
          --username "$APPLE_ID" \
          --password "$APP_SPECIFIC_PASSWORD" \
          --output-format xml

    # ---------- 10. Sprzątanie ----------
    - if: always()
      run: security delete-keychain build.keychain || true
