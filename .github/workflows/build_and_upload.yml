name: Build & Upload to App Store

# uruchamiamy przy puszu na main lub przy oznaczeniu releasem (tag v*)
on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  build-and-submit:
    name: Build i Wyslij do App Store
    runs-on: macos-latest

    # zmienne, które musisz uzupełnić (są też w sekcji env, jeśli wolisz)
    env:
      APP_SCHEME:           "LayerMapper"                    # nazwa schematu w Xcode
      APP_WORKSPACE:        ""                               # jeśli masz .xcworkspace, wypełnij, inaczej ""
      APP_PROJECT:          "LayerMapper.xcodeproj"          # nazwa projektu (jeśli nie workspace)
      APP_EXPORT_METHOD:    "app-store"
      APP_BUNDLE_ID:        "com.layermapper.mobile"
      APP_ARCHIVE_PATH:     "$HOME/Library/Developer/Xcode/Archives/$(date +%Y-%m-%d)/LayerMapper.xcarchive"
      APP_IPA_PATH:         "$HOME/LayerMapper.ipa"

    steps:
      - name: Check out repository (z LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      # ———————————————————————————————————————————————————————
      # 1) Rozpakuj NDI SDK i libndi_ios w odpowiednie miejsca
      # ———————————————————————————————————————————————————————
      - name: Unzip NDI SDK for iOS
        run: |
          # Tworzymy docelową ścieżkę wewnątrz katalogu LayerMapper/LayerMapper:
          mkdir -p "LayerMapper/LayerMapper/NDI SDK for Apple"
          # Rozpakowujemy z katalogu głównego workflow (GITHUB_WORKSPACE)
          unzip -q "$GITHUB_WORKSPACE/ndi_sdk_for_ios.zip" \
            -d "LayerMapper/LayerMapper/NDI SDK for Apple"
        # Aby unzip faktycznie pobrał plik .zip z LFS:
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}

      - name: Unzip libndi_ios.a
        run: |
          mkdir -p "ScreenBroadcast"
          unzip -q "$GITHUB_WORKSPACE/libndi_ios.zip" \
            -d "ScreenBroadcast"
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}

      # ———————————————————————————————————————————————————————
      # 2) Instalacja Ruby (jeśli potrzebujesz fastlane / altool itp.)
      # ———————————————————————————————————————————————————————
      - name: Ustaw Ruby (dla altool, fastlane itp.)
        run: |
          sudo gem install cocoapods --no-document

      # ———————————————————————————————————————————————————————
      # 3) Utwórz keychain i zaimportuj certyfikat + provisioning profile
      # ———————————————————————————————————————————————————————
      - name: Create keychain
        run: |
          # Tworzymy pusty keychain o nazwie build.keychain
          security create-keychain -p "" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "" build.keychain
          security default-keychain -s build.keychain

      - name: Decode and install Distribution Certificate (.p12)
        run: |
          echo "$P12_BASE64" | base64 --decode > distribution.p12
          security import distribution.p12 -k ~/Library/Keychains/build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
        env:
          P12_BASE64:           ${{ secrets.P12_BASE64 }}
          P12_PASSWORD:         ${{ secrets.P12_PASSWORD }}

      - name: Decode and install Provisioning Profile
        run: |
          echo "$MOBILEPROVISION_BASE64" | base64 --decode > LayerMapper_ProvisioningProfile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp LayerMapper_ProvisioningProfile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        env:
          MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}

      # ———————————————————————————————————————————————————————
      # 4) Budowanie archiwum (archive)
      # ———————————————————————————————————————————————————————
      - name: Build Archive
        run: |
          set -o pipefail

          if [ -z "$APP_WORKSPACE" ]; then
            xcodebuild archive \
              -project "$APP_PROJECT" \
              -scheme "$APP_SCHEME" \
              -configuration Release \
              -archivePath "$APP_ARCHIVE_PATH" \
              CODE_SIGN_KEYCHAIN=$(security list-keychains -d user | tr -d '"' | tr '\n' ' ') \
              PROVISIONING_PROFILE_SPECIFIER="LayerMapper AppStore Profile" \
              CODE_SIGN_IDENTITY="Apple Distribution"
          else
            xcodebuild archive \
              -workspace "$APP_WORKSPACE" \
              -scheme "$APP_SCHEME" \
              -configuration Release \
              -archivePath "$APP_ARCHIVE_PATH" \
              CODE_SIGN_KEYCHAIN=$(security list-keychains -d user | tr -d '"' | tr '\n' ' ') \
              PROVISIONING_PROFILE_SPECIFIER="LayerMapper AppStore Profile" \
              CODE_SIGN_IDENTITY="Apple Distribution"
          fi

      # ———————————————————————————————————————————————————————
      # 5) Eksport IPA
      # ———————————————————————————————————————————————————————
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath "$APP_ARCHIVE_PATH" \
            -exportOptionsPlist <<EOF
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"  "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
              <key>method</key>
              <string>app-store</string>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <true/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>${APP_BUNDLE_ID}</key>
                <string>LayerMapper AppStore Profile</string>
              </dict>
              <key>teamID</key>
              <string>${{ secrets.TEAM_ID }}</string>
            </dict>
            </plist>
            EOF \
            -exportPath "$HOME" \
            -allowProvisioningUpdates

      # ———————————————————————————————————————————————————————
      # 6) Upload do App Store Connect
      # ———————————————————————————————————————————————————————
      - name: Upload to App Store (altool)
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file "$APP_IPA_PATH" \
            --username "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APP_SPECIFIC_PASSWORD }}" \
            --output-format xml
        env:
          APPLE_ID:               ${{ secrets.APPLE_ID }}
          APP_SPECIFIC_PASSWORD:  ${{ secrets.APP_SPECIFIC_PASSWORD }}

      # ———————————————————————————————————————————————————————
      # 7) Cleanup build keychain (tylko gdy istnieje)
      # ———————————————————————————————————————————————————————
      - name: Cleanup build keychain
        if: always()
        run: |
          # Spróbuj usunąć build.keychain, jeśli istnieje
          if security list-keychains | grep -q "build.keychain"; then
            security delete-keychain build.keychain
          fi
