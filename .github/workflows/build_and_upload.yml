name: Build & Upload to App Store

on:
  push:
    branches: [ main ]
    tags:     [ 'v*.*.*' ]

jobs:
  build_and_submit:
    name: Build i wyślij do App Store Connect
    runs-on: macos-latest

    env:
      APP_SCHEME:   LayerMapper
      APP_PROJECT:  LayerMapper.xcodeproj
      ARCHIVE_DIR:  $HOME/Library/Developer/Xcode/Archives
      APP_IPA_PATH: $HOME/LayerMapper.ipa
      EXPORT_METHOD: app-store

    steps:
    # —--- 1. Checkout z LFS ----
    - uses: actions/checkout@v4
      with: { lfs: true }

    # —--- 2. Ruby (altool) ----
    - run: sudo gem install cocoapods --no-document

    # —--- 3. Keychain + certyfikat (.p12) ----
    - name: Create temporary keychain
      run: |
        set -x
        security create-keychain -p "" build.keychain
        security set-keychain-settings -lut 21600 build.keychain
        security unlock-keychain -p "" build.keychain
        security list-keychains -d user | tr -d '"' | xargs security list-keychains -s build.keychain

    - name: Import distribution certificate
      env:
        P12_BASE64:  ${{ secrets.P12_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      run: |
        set -x
        echo "$P12_BASE64" | base64 --decode > dist.p12
        security import dist.p12 -k ~/Library/Keychains/build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign

    # —--- 4. Provisioning profiles ----
    - name: Decode & install provisioning profiles
      env:
        MP_APP:     ${{ secrets.MOBILEPROVISION_BASE64 }}
        MP_BC:      ${{ secrets.MOBILEPROVISION_BROADCAST_BASE64 }}
        MP_SETUP:   ${{ secrets.MOBILEPROVISION_SETUP_BASE64 }}
      run: |
        set -x
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$MP_APP"   | base64 --decode > LM.mobileprovision
        echo "$MP_BC"    | base64 --decode > BC.mobileprovision
        echo "$MP_SETUP" | base64 --decode > SETUP.mobileprovision
        cp *.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

    # —--- 5. DEBUG: lista profili ----
    - name: Debug - list installed profiles
      run: |
        for p in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
          NAME=$(security cms -D -i "$p" | plutil -extract Name raw -)
          UUID=$(security cms -D -i "$p" | plutil -extract UUID raw -)
          APP=$(security cms -D -i "$p" | plutil -extract Entitlements.application-identifier raw -)
          echo "▶︎ $NAME | $UUID | $APP"
        done

    # —--- 6. Rozpakuj NDI ----
    - name: Unzip NDI artefacts
      run: |
        set -x
        mkdir -p libs
        unzip -q libs/NDI_SDK.zip            -d libs/
        unzip -q libs/libndi_ios_arm64.a.zip -d libs/

    # —--- 7. Build Archive – automatic signing ----
    - name: Build Xcode archive
      run: |
        set -x
        ARCHIVE_PATH="$ARCHIVE_DIR/$(date +%Y-%m-%d)/LayerMapper.xcarchive"

        xcodebuild archive -verbose \
          -project  "$APP_PROJECT" \
          -scheme   "$APP_SCHEME" \
          -configuration Release \
          -archivePath "$ARCHIVE_PATH" \
          CODE_SIGN_STYLE=Automatic \
          CODE_SIGN_IDENTITY="Apple Distribution" \
          OTHER_CODE_SIGN_FLAGS="--timestamp=none" \
          -allowProvisioningUpdates

    # —--- 8. Export IPA ----
    - name: Export .ipa
      run: |
        set -x
        xcodebuild -exportArchive \
          -archivePath "$ARCHIVE_DIR/$(date +%Y-%m-%d)/LayerMapper.xcarchive" \
          -exportOptionsPlist <(cat <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <plist version="1.0">
            <dict>
              <key>method</key> <string>${EXPORT_METHOD}</string>
              <key>teamID</key> <string>${{ secrets.TEAM_ID }}</string>
              <key>uploadSymbols</key> <true/>
              <key>compileBitcode</key> <true/>
            </dict>
          </plist>
          EOF) \
          -exportPath "$HOME"

    # —--- 9. Upload do ASC ----
    - name: Upload to App Store Connect
      env:
        APPLE_ID:              ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_SPECIFIC_PASSWORD }}
      run: |
        set -x
        xcrun altool --upload-app \
          --file "$APP_IPA_PATH" \
          --type ios \
          --username "$APPLE_ID" \
          --password "$APP_SPECIFIC_PASSWORD" \
          --output-format xml

    # —--- 10. Sprzątanie keychain ----
    - if: always()
      name: Cleanup keychain
      run: security delete-keychain build.keychain || true
