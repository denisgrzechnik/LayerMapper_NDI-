name: Build & Upload to App Store

on:
  push:
    branches: [ main ]
    tags:     [ 'v*.*.*' ]

jobs:
  build_and_submit:
    name: Build i wyślij do App Store Connect
    runs-on: macos-latest

    env:
      APP_SCHEME:   LayerMapper
      APP_PROJECT:  LayerMapper.xcodeproj
      ARCHIVE_DIR:  $HOME/Library/Developer/Xcode/Archives
      APP_IPA_PATH: $HOME/LayerMapper.ipa
      EXPORT_METHOD: app-store

    steps:
    # —--- 1. Checkout z LFS ---------------------------------------------------
    - uses: actions/checkout@v4
      with:
        lfs: true

    # —--- 2. Ruby (altool) -----------------------------------------------------
    - run: |
        sudo gem install cocoapods --no-document

    # —--- 3. Keychain + certyfikat (.p12) -------------------------------------
    - name: Create temporary keychain
      run: |
        set -x
        security create-keychain -p "" build.keychain
        security set-keychain-settings -lut 21600 build.keychain
        security unlock-keychain -p "" build.keychain
        security list-keychains -d user | tr -d '"' | xargs security list-keychains -s build.keychain

    - name: Import distribution certificate
      env:
        P12_BASE64:  ${{ secrets.P12_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      run: |
        set -x
        echo "$P12_BASE64" | base64 --decode > dist.p12
        security import dist.p12 \
          -k ~/Library/Keychains/build.keychain \
          -P "$P12_PASSWORD" \
          -T /usr/bin/codesign

    # —--- 4. Provisioning profiles --------------------------------------------
    - name: Decode & install provisioning profiles
      env:
        MP_APP:   ${{ secrets.MOBILEPROVISION_BASE64 }}
        MP_BC:    ${{ secrets.MOBILEPROVISION_BROADCAST_BASE64 }}
        MP_SETUP: ${{ secrets.MOBILEPROVISION_SETUP_BASE64 }}
      run: |
        set -x
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

        echo "$MP_APP"   | base64 --decode > LM.mobileprovision
        echo "$MP_BC"    | base64 --decode > BC.mobileprovision
        echo "$MP_SETUP" | base64 --decode > SETUP.mobileprovision

        cp LM.mobileprovision    ~/Library/MobileDevice/Provisioning\ Profiles/
        cp BC.mobileprovision    ~/Library/MobileDevice/Provisioning\ Profiles/
        cp SETUP.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

    # —--- 5. DEBUG: pokaż profile ---------------------------------------------
    - name: Debug – list installed profiles
      run: |
        for p in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
          NAME=$(security cms -D -i "$p" | plutil -extract Name raw -)
          UUID=$(security cms -D -i "$p" | plutil -extract UUID raw -)
          APP=$(security cms -D -i "$p" | plutil -extract Entitlements.application-identifier raw -)
          echo "▶︎ $NAME | $UUID | $APP"
        done

    # —--- 6. Wyciągnij UUID-y --------------------------------------------------
    - id: uuids
      run: |
        echo "app_uuid=$(security cms -D -i LM.mobileprovision   | plutil -extract UUID raw -)"   >> $GITHUB_OUTPUT
        echo "bc_uuid=$(security cms -D -i BC.mobileprovision    | plutil -extract UUID raw -)"   >> $GITHUB_OUTPUT
        echo "setup_uuid=$(security cms -D -i SETUP.mobileprovision | plutil -extract UUID raw -)" >> $GITHUB_OUTPUT

    # —--- 7. Rozpakuj NDI ------------------------------------------------------
    - name: Unzip NDI artefacts
      run: |
        set -x
        mkdir -p libs
        unzip -q libs/NDI_SDK.zip            -d libs/
        unzip -q libs/libndi_ios_arm64.a.zip -d libs/

    # —--- 8. Build Archive -----------------------------------------------------
    - name: Build Xcode archive
      env:
        APP_UUID:   ${{ steps.uuids.outputs.app_uuid }}
        BC_UUID:    ${{ steps.uuids.outputs.bc_uuid }}
        SETUP_UUID: ${{ steps.uuids.outputs.setup_uuid }}
      run: |
        set -xo pipefail
        ARCHIVE_PATH="$ARCHIVE_DIR/$(date +%Y-%m-%d)/LayerMapper.xcarchive"

        xcodebuild archive \
          -project "$APP_PROJECT" \
          -scheme  "$APP_SCHEME" \
          -configuration Release \
          -archivePath "$ARCHIVE_PATH" \
          CODE_SIGN_STYLE=Manual \
          CODE_SIGN_IDENTITY="Apple Distribution" \
          CODE_SIGN_KEYCHAIN="$HOME/Library/Keychains/build.keychain-db" \
          "PROVISIONING_PROFILE[com.layermapper.mobile]=$APP_UUID" \
          "PROVISIONING_PROFILE[com.layermapper.mobile.screenbroadcast]=$BC_UUID" \
          "PROVISIONING_PROFILE[com.layermapper.mobile.screenbroadcast.setup]=$SETUP_UUID"

    # —--- 9. Export IPA --------------------------------------------------------
    - name: Export .ipa
      env:
        APP_UUID:   ${{ steps.uuids.outputs.app_uuid }}
        BC_UUID:    ${{ steps.uuids.outputs.bc_uuid }}
        SETUP_UUID: ${{ steps.uuids.outputs.setup_uuid }}
      run: |
        set -xo pipefail

        # 1) utwórz tymczasowy ExportOptions.plist
        EXP_PLIST=$(mktemp /tmp/exportOptionsXXXX.plist)
        cat >"$EXP_PLIST" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>method</key>              <string>${EXPORT_METHOD}</string>
    <key>teamID</key>              <string>${{ secrets.TEAM_ID }}</string>
    <key>signingStyle</key>        <string>manual</string>
    <key>provisioningProfiles</key>
    <dict>
      <key>com.layermapper.mobile</key>                       <string>${APP_UUID}</string>
      <key>com.layermapper.mobile.screenbroadcast</key>       <string>${BC_UUID}</string>
      <key>com.layermapper.mobile.screenbroadcast.setup</key> <string>${SETUP_UUID}</string>
    </dict>
  </dict>
</plist>
EOF

        # 2) poprawna ścieżka do archiwum
        ARCHIVE_PATH="$ARCHIVE_DIR/$(date +%Y-%m-%d)/LayerMapper.xcarchive"

        # 3) eksport IPA
        xcodebuild -exportArchive \
          -archivePath "$ARCHIVE_PATH" \
          -exportOptionsPlist "$EXP_PLIST" \
          -exportPath "$HOME"

        # 4) lista plików .ipa (pomocne w logu)
        ls -lh "$HOME" | grep '.ipa' || true

    # —--- 10. Upload do App Store Connect -------------------------------------
    - name: Upload to App Store Connect
      env:
        APPLE_ID:              ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_SPECIFIC_PASSWORD }}
      run: |
        set -x
        xcrun altool --upload-app \
          --file "$APP_IPA_PATH" \
          --type ios \
          --username "$APPLE_ID" \
          --password "$APPLE_SPECIFIC_PASSWORD" \
          --output-format xml

    # —--- 11. Sprzątanie -------------------------------------------------------
    - name: Cleanup keychain
      if: always()
      run: |
        security delete-keychain build.keychain || true
