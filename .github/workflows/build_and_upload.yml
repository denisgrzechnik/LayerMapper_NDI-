name: Build & Upload to App Store

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

jobs:
  build_and_submit:
    name: Build i wyślij do App Store Connect
    runs-on: macos-latest

    env:
      APP_SCHEME:      LayerMapper
      APP_PROJECT:     LayerMapper.xcodeproj
      ARCHIVE_DIR:     $HOME/Library/Developer/Xcode/Archives
      APP_IPA_PATH:    $HOME/LayerMapper.ipa
      EXPORT_METHOD:   app-store

    steps:
      # 1. Checkout (wraz z LFS)
      - uses: actions/checkout@v4
        with:
          lfs: true

      # 2. Przełącz na Xcode 16 (iOS 18 SDK)
      - name: Install & switch to Xcode 16
        uses: actions/setup-xcode@v3
        with:
          xcode-version: '16.0'

      # 3. Debug: sprawdź aktualną wersję Xcode i dostępne SDK
      - name: Debug – Check Xcode version and SDKs
        run: |
          xcodebuild -version
          xcodebuild -showsdks

      # 4. Zainstaluj CocoaPods (potrzebne, żeby używać altool)
      - name: Install CocoaPods (dla altool)
        run: sudo gem install cocoapods --no-document

      # 5. Utworzenie tymczasowego keychain oraz zaimportowanie certyfikatu .p12
      - name: Create temporary keychain
        run: |
          set -x
          security create-keychain -p "" build.keychain
          security set-keychain-settings -lut 21600 build.keychain       # 6 h
          security unlock-keychain -p "" build.keychain
          security list-keychains -d user | tr -d '"' | xargs security list-keychains -s build.keychain

      - name: Import distribution certificate (non-interactive access)
        env:
          P12_BASE64:   ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          set -x
          echo "$P12_BASE64" | base64 --decode > dist.p12

          # import certyfikatu i zezwolenie narzędziom codesign/xcodebuild
          security import dist.p12 \
            -k ~/Library/Keychains/build.keychain \
            -P "$P12_PASSWORD" \
            -T /usr/bin/codesign \
            -T /usr/bin/xcodebuild \
            -T /usr/bin/security

          # "Always Allow" dla apple-tool oraz codesign (usuwa popup)
          security set-key-partition-list -S apple-tool:,codesign:,apple: \
            -s -k "" build.keychain

      # 6. (opcjonalnie) – weryfikacja, czy certyfikat jest widoczny w keychain
      - name: Debug – verify signing identity
        run: security find-identity -v -p codesigning ~/Library/Keychains/build.keychain

      # 7. Dekodowanie i instalacja provisioning profiles
      - name: Decode & install provisioning profiles
        env:
          MOBILEPROVISION_BASE64:           ${{ secrets.MOBILEPROVISION_BASE64 }}
          MOBILEPROVISION_BROADCAST_BASE64: ${{ secrets.MOBILEPROVISION_BROADCAST_BASE64 }}
          MOBILEPROVISION_SETUP_BASE64:     ${{ secrets.MOBILEPROVISION_SETUP_BASE64 }}
        run: |
          set -x
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

          echo "$MOBILEPROVISION_BASE64"           | base64 --decode > LM.mobileprovision
          echo "$MOBILEPROVISION_BROADCAST_BASE64" | base64 --decode > BC.mobileprovision
          echo "$MOBILEPROVISION_SETUP_BASE64"     | base64 --decode > SETUP.mobileprovision

          cp LM.mobileprovision    ~/Library/MobileDevice/Provisioning\ Profiles/
          cp BC.mobileprovision    ~/Library/MobileDevice/Provisioning\ Profiles/
          cp SETUP.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      # 8. Debug – wypisz nazwy, UUID i AppID wszystkich zainstalowanych profili
      - name: Debug – list installed profiles
        run: |
          for p in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            NAME=$(security cms -D -i "$p" | plutil -extract Name raw -)
            UUID=$(security cms -D -i "$p" | plutil -extract UUID raw -)
            APP=$(security cms -D -i "$p" | plutil -extract Entitlements.application-identifier raw -)
            echo "▶︎ $NAME | $UUID | $APP"
          done

      # 9. Wyciągnięcie UUID z każdego profilu do zmiennych output
      - id: uuids
        run: |
          APP_UUID=$(security cms -D -i LM.mobileprovision    | plutil -extract UUID raw -)
          BC_UUID=$(security cms -D -i BC.mobileprovision     | plutil -extract UUID raw -)
          SETUP_UUID=$(security cms -D -i SETUP.mobileprovision | plutil -extract UUID raw -)
          echo "app_uuid=$APP_UUID"   >> $GITHUB_OUTPUT
          echo "bc_uuid=$BC_UUID"     >> $GITHUB_OUTPUT
          echo "setup_uuid=$SETUP_UUID" >> $GITHUB_OUTPUT

      # 10. Rozpakowanie artefaktów NDI
      - name: Unzip NDI artefacts
        run: |
          set -x
          mkdir -p libs
          unzip -q libs/NDI_SDK.zip            -d libs/
          unzip -q libs/libndi_ios_arm64.a.zip -d libs/

      # 11. Budowanie archiwum Xcode
      - name: Build Xcode archive
        env:
          APP_UUID:   ${{ steps.uuids.outputs.app_uuid }}
          BC_UUID:    ${{ steps.uuids.outputs.bc_uuid }}
          SETUP_UUID: ${{ steps.uuids.outputs.setup_uuid }}
        run: |
          set -x
          ARCHIVE_PATH="$ARCHIVE_DIR/$(date +%Y-%m-%d)/LayerMapper.xcarchive"

          xcodebuild archive \
            -project "$APP_PROJECT" \
            -scheme  "$APP_SCHEME" \
            -configuration Release \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            CODE_SIGN_KEYCHAIN="$HOME/Library/Keychains/build.keychain" \
            "PROVISIONING_PROFILE[com.layermapper.mobile]=$APP_UUID" \
            "PROVISIONING_PROFILE[com.layermapper.mobile.screenbroadcast]=$BC_UUID" \
            "PROVISIONING_PROFILE[com.layermapper.mobile.screenbroadcast.setup]=$SETUP_UUID"

      # 12. Eksport do pliku .ipa (zapis exportOptions.plist do pliku)
      - name: Export .ipa
        env:
          APP_UUID:   ${{ steps.uuids.outputs.app_uuid }}
          BC_UUID:    ${{ steps.uuids.outputs.bc_uuid }}
          SETUP_UUID: ${{ steps.uuids.outputs.setup_uuid }}
        run: |
          set -x

          cat <<EOF > exportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key>
              <string>${EXPORT_METHOD}</string>
              <key>teamID</key>
              <string>${{ secrets.TEAM_ID }}</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>com.layermapper.mobile</key>
                <string>${APP_UUID}</string>
                <key>com.layermapper.mobile.screenbroadcast</key>
                <string>${BC_UUID}</string>
                <key>com.layermapper.mobile.screenbroadcast.setup</key>
                <string>${SETUP_UUID}</string>
              </dict>
            </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_DIR/$(date +%Y-%m-%d)/LayerMapper.xcarchive" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$HOME"

      # 13. Upload do App Store Connect
      - name: Upload to App Store Connect
        env:
          APPLE_ID:              ${{ secrets.APPLE_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        run: |
          set -x
          xcrun altool --upload-app \
            --file "$HOME/LayerMapper.ipa" \
            --type ios \
            --username "$APPLE_ID" \
            --password "@env:APP_SPECIFIC_PASSWORD" \
            --output-format xml

      # 14. Cleanup keychain
      - if: always()
        name: Cleanup keychain
        run: |
          security delete-keychain build.keychain || true
