name: Build & Upload to App Store

# Uruchamia workflow przy pushu na gałąź main lub gdy oznaczysz release tagiem v*
on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  build-and-submit:
    name: Build i Wyslij do App Store
    runs-on: macos-latest        # macos-latest ma Xcode 16.x (i iOS 18 SDK)

    env:
      # Zamień na swoje wartości:
      APP_SCHEME: "LayerMapper"                 # Schemat w Xcode
      APP_PROJECT: "LayerMapper.xcodeproj"      # nazwa .xcodeproj (jeśli nie używasz workspace)
      APP_EXPORT_METHOD: "app-store"            # -> do publikacji w App Store
      APP_BUNDLE_ID: "com.layermapper.mobile"   # główny bundle identifier
      APP_ARCHIVE_PATH: "$HOME/Library/Developer/Xcode/Archives/$(date +%Y-%m-%d)/LayerMapper.xcarchive"
      APP_IPA_PATH: "$HOME/LayerMapper.ipa"

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          lfs: true

      # —— Rozpakowanie bibliotek NDI (do folderów w kodzie źródłowym) —— 
      - name: Unzip NDI SDK for iOS
        run: |
          mkdir -p "LayerMapper/LayerMapper/NDI SDK for Apple"
          unzip -qo ndi_sdk_for_ios.zip -d "LayerMapper/LayerMapper/NDI SDK for Apple"

      - name: Unzip libndi_ios.a
        run: |
          mkdir -p "LayerMapper/ScreenBroadcast"
          unzip -qo libndi_ios.zip -d "LayerMapper/ScreenBroadcast"

      - name: Ustaw Ruby (dla altool, fastlane itp.)
        run: |
          sudo gem install cocoapods --no-document

      # —— Przygotuj Keychain i Klucze —— 
      - name: Create keychain
        run: |
          security create-keychain -p "" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "" build.keychain
          security default-keychain -s build.keychain

      - name: Decode and install Distribution Certificate (.p12)
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          echo "$P12_BASE64" | base64 --decode > distribution.p12
          security import distribution.p12 -k "~/Library/Keychains/build.keychain" -P "$P12_PASSWORD" -T /usr/bin/codesign

      - name: Decode and install Provisioning Profiles
        env:
          MOBILEPROVISION_LAYER: ${{ secrets.MOBILEPROVISION_LAYER }}
          MOBILEPROVISION_SCREEN: ${{ secrets.MOBILEPROVISION_SCREEN }}
          MOBILEPROVISION_SETUP: ${{ secrets.MOBILEPROVISION_SETUP }}
        run: |
          # Główny provisioning dla LayerMapper
          echo "$MOBILEPROVISION_LAYER" | base64 --decode > LayerMapper.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp LayerMapper.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

          # Provisioning dla ScreenBroadcast
          echo "$MOBILEPROVISION_SCREEN" | base64 --decode > ScreenBroadcast.mobileprovision
          cp ScreenBroadcast.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

          # Provisioning dla ScreenBroadcastSetupUI
          echo "$MOBILEPROVISION_SETUP" | base64 --decode > ScreenBroadcastSetupUI.mobileprovision
          cp ScreenBroadcastSetupUI.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      # —— Budowanie aplikacji —— 
      - name: Build Archive
        run: |
          set -o pipefail
          xcodebuild archive \
            -project "$APP_PROJECT" \
            -scheme "$APP_SCHEME" \
            -configuration Release \
            -archivePath "$APP_ARCHIVE_PATH" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            -allowProvisioningUpdates

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath "$APP_ARCHIVE_PATH" \
            -exportOptionsPlist <<EOF
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//"  "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
              <key>method</key>
              <string>app-store</string>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <true/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>teamID</key>
              <string>${{ secrets.TEAM_ID }}</string>
            </dict>
            </plist>
            EOF \
            -exportPath "$HOME" \
            -allowProvisioningUpdates

      # —— Wyślij do App Store Connect —— 
      - name: Upload to App Store (altool)
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file "$APP_IPA_PATH" \
            --username "$APPLE_ID" \
            --password "$APP_SPECIFIC_PASSWORD" \
            --output-format xml

      - name: Cleanup build keychain
        if: always()
        run: |
          security delete-keychain build.keychain
