name: Build & Upload to App Store

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  build-and-submit:
    name: Build i Wyslij do App Store
    runs-on: macos-latest

    env:
      APP_SCHEME: "LayerMapper"
      APP_WORKSPACE: ""                          # jeśli nie używasz workspace, zostaw puste
      APP_PROJECT: "LayerMapper.xcodeproj"
      APP_EXPORT_METHOD: "app-store"
      APP_BUNDLE_ID: "com.layermapper.mobile"
      APP_ARCHIVE_PATH: "$HOME/Library/Developer/Xcode/Archives/$(date +%Y-%m-%d)/LayerMapper.xcarchive"
      APP_IPA_PATH: "$HOME/LayerMapper.ipa"

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Ustaw Ruby (dla altool, fastlane itp.)
        run: |
          sudo gem install cocoapods --no-document

      # —— Przygotuj Keychain i Klucze —— 
      - name: Create keychain
        run: |
          security create-keychain -p "" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "" build.keychain
          security list-keychains -s "$(security list-keychains -d user | tr -d '"' | tr '\n' ' ')" build.keychain

      - name: Decode and install Distribution Certificate (.p12)
        run: |
          echo "$P12_BASE64" | base64 --decode > distribution.p12
          security import distribution.p12 -k ~/Library/Keychains/build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}

      - name: Decode and install Provisioning Profile
        run: |
          echo "$MOBILEPROVISION_BASE64" | base64 --decode > LayerMapper_AppStore.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp LayerMapper_AppStore.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        env:
          MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}

      # —— Rozpakuj biblioteki NDI (LFS już zrobiło checkout) —— 
      - name: Unzip NDI SDK for iOS
        run: |
          mkdir -p "LayerMapper/LayerMapper/NDI SDK for Apple"
          unzip -q ndi_sdk_for_ios.zip -d "LayerMapper/LayerMapper/NDI SDK for Apple"

      - name: Unzip libndi_ios.a
        run: |
          mkdir -p "LayerMapper/ScreenBroadcast"
          unzip -q libndi_ios.zip -d "LayerMapper/ScreenBroadcast"

      # —— Budowanie aplikacji —— 
      - name: Build Archive
        run: |
          set -o pipefail

          # Zmienna, w której trzymamy ścieżkę do keychaina:
          KEYCHAIN_PATH="$(security list-keychains -d user | tr -d '"' | tr '\n' ' ')"

          if [ -z "$APP_WORKSPACE" ]; then
            xcodebuild archive \
              -project "$APP_PROJECT" \
              -scheme "$APP_SCHEME" \
              -configuration Release \
              -archivePath "$APP_ARCHIVE_PATH" \
              CODE_SIGN_KEYCHAIN="$KEYCHAIN_PATH" \
              -allowProvisioningUpdates
          else
            xcodebuild archive \
              -workspace "$APP_WORKSPACE" \
              -scheme "$APP_SCHEME" \
              -configuration Release \
              -archivePath "$APP_ARCHIVE_PATH" \
              CODE_SIGN_KEYCHAIN="$KEYCHAIN_PATH" \
              -allowProvisioningUpdates
          fi

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath "$APP_ARCHIVE_PATH" \
            -exportOptionsPlist <<EOF
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"  "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
              <key>method</key>
              <string>app-store</string>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <true/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>${APP_BUNDLE_ID}</key>
                <string>LayerMapper AppStore Profile</string>
              </dict>
              <key>teamID</key>
              <string>${{ secrets.TEAM_ID }}</string>
            </dict>
            </plist>
            EOF \
            -exportPath "$HOME"                 \
            -allowProvisioningUpdates

      # —— Wyślij do App Store Connect —— 
      - name: Upload to App Store (altool)
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file "$APP_IPA_PATH" \
            --username "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APP_SPECIFIC_PASSWORD }}" \
            --output-format xml
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}

      - name: Cleanup build keychain
        if: always()
        run: |
          security delete-keychain build.keychain

